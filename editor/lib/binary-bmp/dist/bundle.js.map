{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://binary-bmp/./src/bits.ts","webpack://binary-bmp/./src/bmp.ts","webpack://binary-bmp/./src/buffer.ts","webpack://binary-bmp/./src/canvas.ts","webpack://binary-bmp/./src/color.ts","webpack://binary-bmp/./src/index.ts","webpack://binary-bmp/webpack/bootstrap","webpack://binary-bmp/webpack/startup"],"sourcesContent":["/** 单色 */\nexport const BINARY = 1;\n\n/** 16色 */\nexport const VGA = 4;\n\n/** 256色 */\nexport const GREY = 8;\n\n/** 高彩色 */\nexport const RGB = 24;\n\n/** 真彩 */\nexport const RGBA = 32;\n","/**\n * BMP位图文件格式\n * https://en.wikipedia.org/wiki/BMP_file_format\n * \n * 位图文件由文件头、信息头、颜色表、像素数据组成。\n * 分为1位单色位图、4位VGA位图、8位灰度位图、24位RGB位图、32位RGBA位图几种。\n * \n * ## 颜色表\n * \n * 只有1,4,8位色彩才需要颜色表, 24,32位真彩色无颜色表;\n * 颜色表中最多有2^n个颜色, 即1,4,8位色彩分别有2,16,256个, 少于2^n时剩余的颜色会显示为黑色;\n * 每个颜色由4字节的BGRA组成, 在不支持Alpha透明度通道的标准中最后一字节固定为0x00;\n * \n * ## 像素数据\n * \n * 像素数据记录了位图的每一个像素。\n * 1位色彩每8个像素占1个字节;\n * 4位色彩每2个像素占1个字节;\n * 8位色彩每1个像素占1个字节;\n * 24位色彩每1个像素占3个字节, 按B,G,R顺序组成;\n * 32位色彩每1个像素占4个字节, 按B,G,R,A顺序组成;\n * 记录顺序在扫描列之间是从下到上, 记录顺序在扫描行内是从左到右;\n * 一个扫描行所占的字节数必须是4的倍数, 不足的以0填充;\n */\n\nimport { GREY } from './bits';\nimport { SequentialDataView } from './buffer';\nimport { rgba2bgra } from './color';\n\nexport interface IOption {\n  bits: number,\n  width: number,\n  height: number,\n  palette?: string[],\n  data: Indexable<number>,\n}\n\ninterface Indexable<T> {\n  [index: number]: T;\n}\n\n/** 生成位图文件 */\nexport function make(options: IOption) {\n  const { bits, width, height, palette, data } = options;\n  /** 颜色表大小(字节) */\n  const colorTableSize = bits > GREY ? 0 : (palette?.length || (1 << bits)) * 4;\n  const imageRowSize = Math.floor((bits * width + 31) / 32) * 4;\n  const imageColSize = Math.abs(height);\n  /** 像素数据大小(字节) */\n  const rawSize = imageRowSize * imageColSize;\n  /** 像素数据的起始位置(字节) */\n  const startAt = 54 + colorTableSize;\n  /** 文件的大小(字节) */\n  const fileSize = startAt + rawSize;\n\n  /** 位图文件 */\n  const buffer = new ArrayBuffer(fileSize);\n  const view = new SequentialDataView(buffer);\n\n  // 文件头(BITMAPFILEHEADER)\n  view.appendUint16(0x424D);         // 1-2字节; 文件的类型; The header field used to identify the BMP and DIB file is 0x42 0x4D in hexadecimal, same as BM in ASCII.\n  view.appendUint32(fileSize, true); // 3-6字节; 文件的大小; The size of the BMP file in bytes.\n  view.appendUint16(0, true);        // 6-8字节; 保留字; Reserved; actual value depends on the application that creates the image, if created manually can be 0.\n  view.appendUint16(0, true);        // 8-10字节; 保留字; Reserved; actual value depends on the application that creates the image, if created manually can be 0.\n  view.appendUint32(startAt, true);  // 11-14字节; 像素数据的起始位置; The offset, i.e. starting address, of the byte where the bitmap image data (pixel array) can be found.\n  \n  // 信息头(BITMAPINFOHEADER)\n  view.appendUint32(40, true);       // 15-18字节; 本结构所占用字节数;the size of this header (40 bytes).\n  view.appendUint32(width, true);    // 19-22字节; 宽度, 水平方向的像素个数; the bitmap width in pixels (signed integer).\n  view.appendUint32(height, true);   // 23-26字节; 高度, 垂直方向的像素个数; the bitmap height in pixels (signed integer).\n  view.appendUint16(1, true);        // 27-28字节; 目标设备的级别, 必须为1; the number of color planes (must be 1).\n  view.appendUint16(bits, true);     // 29-30字节; 每个像素占用的位数; the number of bits per pixel, which is the color depth of the image. Typical values are 1, 4, 8, 16, 24 and 32.\n  view.appendUint32(0, true);        // 31-34字节; 位图压缩类型, 必须是0(不压缩), 1(BI_RLE8压缩类型)或2(BI_RLE4压缩类型)之一; the compression method being used. See the next table for a list of possible values.\n  view.appendUint32(rawSize, true);  // 35-38字节; the image size. This is the size of the raw bitmap data; a dummy 0 can be given for BI_RGB bitmaps.\n  view.appendUint32(0, true);        // 39-42字节; 位图水平分辨率, 每米像素数, 在设备无关位图中为0; the horizontal resolution of the image. (pixel per meter, signed integer).\n  view.appendUint32(0, true);        // 43-46字节; 位图垂直分辨率, 每米像素数, 在设备无关位图中为0; the vertical resolution of the image. (pixel per meter, signed integer).\n  view.appendUint32(0, true);        // 47-50字节; 位图实际使用的颜色表中的颜色数, 设为0表示2的n次方; the number of colors in the color palette, or 0 to default to 2n.\n  view.appendUint32(0, true);        // 51-54字节; 位图显示过程中重要的颜色数, 一般忽略，设为0; the number of important colors used, or 0 when every color is important; generally ignored.\n\n  // 颜色表(COLORTABLE)\n  if (bits <= GREY) {\n    if (Array.isArray(palette) && palette.length > 0) {\n      for (const color of palette) {\n        view.appendUint32(rgba2bgra(color));\n      }\n    } else {\n      // 构造默认灰度颜色表\n      const step = 0xFF / ((1 << bits) - 1); // (2^8 - 1) / (2^n - 1): 255, 17, 1\n      for (let i = 0; i < 256; i += step) {\n        view.appendUint32((i << 24) + (i << 16) + (i << 8)); // 2^24(B) + 2^16(G) + 2^8(R) + 2^1(QUAD)*0\n      }\n    }\n  }\n  \n  // 位图数据(PIXELSTORAGE)\n  const bitsPerDataItem = Math.min(8, bits); // 传入的数组中每个元素应该占的位数; 1,4,8,24,32位色彩分别对应1,4,8,8,8\n  const bytesPerRow = width * Math.ceil(bits / 8); // 位图数据每行所占字节数; 1,4,8,24,32位色彩分别对应width*(1,1,1,3,4)\n  // 记录顺序在扫描列之间是从下到上\n  for (let y = height - 1; y >= 0; y -= 1) {\n    let uint32 = 0;\n    let offset = 0;\n    // 记录顺序在扫描行内是从左到右\n    for (let x = 0; x < bytesPerRow; x += 1) {\n      let indexOfDataItem = y * bytesPerRow + x;\n      // 真彩色需的存储顺序为BGRA\n      if (bits > GREY) {\n        const bytesPerPixel = bits / 8;\n        const pixelOffset = indexOfDataItem % bytesPerPixel;\n        switch (pixelOffset) {\n          case 0: indexOfDataItem += 2; break; // B -> R\n          case 2: indexOfDataItem -= 2; break; // R -> B\n          default: break;\n        }\n      }\n      uint32 <<= bitsPerDataItem;\n      uint32 += data[indexOfDataItem];\n      offset += bitsPerDataItem;\n      if (offset === 32) {\n        view.appendUint32(uint32);\n        uint32 = 0;\n        offset = 0;\n      } else if (x === bytesPerRow - 1) {\n        // 一个扫描行所占的字节数必须是4的倍数, 不足的以0填充\n        uint32 <<= 32 - offset;\n        view.appendUint32(uint32);\n        uint32 = 0;\n        offset = 0;\n      }\n    }\n  }\n  return new Uint8Array(buffer);\n}\n","export class SequentialDataView {\n  private view: DataView\n  private pos: number\n  \n  constructor (arrayBuffer: ArrayBuffer) {\n    this.view = new DataView(arrayBuffer)\n    this.pos = 0\n  }\n\n  appendUint16(value: number, littleEndian?: boolean) {\n    this.view.setUint16(this.pos, value, littleEndian);\n    this.pos += 2;\n  }\n\n  appendUint32(value: number, littleEndian?: boolean) {\n    this.view.setUint32(this.pos, value, littleEndian);\n    this.pos += 4;\n  }\n}\n","import { BINARY, RGBA, GREY } from './bits';\nimport { make } from './bmp';\n\nconst pattern = [\n  [0, 128, 32, 160, 8, 136, 40, 168],\n  [192, 64, 224, 96, 200, 72, 232, 104],\n  [48, 176, 16, 144, 56, 184, 24, 152],\n  [240, 112, 208, 80, 248, 120, 216, 88],\n  [12, 140, 44, 172, 4, 132, 36, 164],\n  [204, 76, 236, 108, 196, 68, 228, 100],\n  [60, 188, 28, 156, 52, 180, 20, 148],\n  [252, 124, 220, 92, 244, 116, 212, 8],\n];\n\ninterface ICanvasLike {\n  width: number;\n\theight: number;\n  getContext(contextId: '2d'): {\n    getImageData(sx: number, sy: number, sw: number, sh: number): {\n      readonly width: number;\n      readonly height: number;\n      readonly data: Uint8ClampedArray;\n    };\n  };\n}\n\nexport function fromCanvas(bits: number, canvas: ICanvasLike) {\n  const ctx = canvas.getContext('2d');\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const { width, height, data } = imageData;\n\n  if (bits === GREY || bits === BINARY) {\n    const uint8 = new Uint8ClampedArray(width * height);\n    for (let i = 0; i < uint8.length; i += 1) {\n      const r = data[i * 4 + 0];\n      const g = data[i * 4 + 1];\n      const b = data[i * 4 + 2];\n      const grey = 0.299 * r + 0.587 * g + 0.114 * b;\n      if (bits === GREY) {\n        uint8[i] = grey;\n      } else {\n        const x = i % width;\n        const y = Math.floor(i / width);\n        uint8[i] = grey > pattern[x % 8][y % 8] ? 1 : 0;\n      }\n    }\n    return make({ bits, width, height, data: uint8 });\n  } else if (bits === RGBA) {\n    return make({ bits, width, height, data });\n  } else {\n    throw new Error(`Support 1 or 8 or 32 bits color only, recieved [${bits}]`);\n  }\n}\n","/** BGRA颜色字符串转32位二进制数 */\nfunction bgra2bin(bgrString: string) {\n  const s = bgrString.replace(/^#/, '');\n  return parseInt(s.padEnd(8, '0'), 16);\n}\n\n/** RGBA颜色字符串转32位二进制数 */\nexport function rgba2bgra(rgbString: string) {\n  const s = rgbString.replace(/^#/, '');\n  const r = s.slice(0, 2);\n  const g = s.slice(2, 4);\n  const b = s.slice(4, 6);\n  const a = s.slice(6, 8).padEnd(2, 'F');\n  return bgra2bin(b + g + r + a);\n}\n","export * from './bits';\nexport { make, IOption } from './bmp';\nexport { fromCanvas } from './canvas';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["BINARY","VGA","GREY","RGB","RGBA","options","bits","width","height","palette","data","colorTableSize","length","rawSize","Math","floor","abs","startAt","fileSize","buffer","ArrayBuffer","view","SequentialDataView","appendUint16","appendUint32","Array","isArray","color","rgba2bgra","step","i","bitsPerDataItem","min","bytesPerRow","ceil","y","uint32","offset","x","indexOfDataItem","Uint8Array","arrayBuffer","this","DataView","pos","value","littleEndian","setUint16","setUint32","pattern","canvas","imageData","getContext","getImageData","uint8","Uint8ClampedArray","grey","make","Error","rgbString","s","replace","r","slice","g","bgrString","parseInt","padEnd","bgra2bin","fromCanvas","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}